/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.gtnewhorizons.gtnhgradle;

import java.io.File;
import java.io.IOException;
import java.io.Writer;
import java.io.FileWriter;
import java.nio.file.Files;

import com.google.common.collect.ImmutableMap;
import org.gradle.testkit.runner.GradleRunner;
import org.gradle.testkit.runner.BuildResult;
import org.gradle.testkit.runner.TaskOutcome;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import static org.junit.jupiter.api.Assertions.*;

/**
 * A simple functional test for the 'com.gtnewhorizons.gtnhgradle.greeting' plugin.
 */
class GTNHGradlePluginFunctionalTest {

    @TempDir
    File projectDir;

    private File getBuildFile() {
        return new File(projectDir, "build.gradle");
    }

    private File getPropertiesFile() {
        return new File(projectDir, "gradle.properties");
    }

    private File getSettingsFile() {
        return new File(projectDir, "settings.gradle");
    }

    private static final String SIMPLE_SETTINGS_FILE = """
        plugins {
            id('com.gtnewhorizons.gtnhsettingsconvention')
        }
        """;

    private static final String SIMPLE_BUILD_FILE = """
        plugins {
            id('com.gtnewhorizons.gtnhconvention')
        }
        """;

    private static final String SIMPLE_PROPERTIES_FILE = """
        modName = MyMod
        modId = mymodid
        modGroup = com.myname.mymodid
        enableModernJavaSyntax = true
        enableGenericInjection = true
        """;

    @Test
    void canRunRfgTask() throws IOException {
        writeString(getSettingsFile(), SIMPLE_SETTINGS_FILE);
        writeString(getBuildFile(), SIMPLE_BUILD_FILE);
        writeString(getPropertiesFile(), SIMPLE_PROPERTIES_FILE);
        Files.createDirectories(
            projectDir.toPath()
                .resolve("src/main/javacom/myname/mymodid"));

        // Run the build
        GradleRunner runner = GradleRunner.create()
            .withEnvironment(ImmutableMap.of("VERSION", "1.0.0"));
        runner.forwardOutput();
        runner.withPluginClasspath();
        runner.withArguments("downloadVanillaJars");
        runner.withProjectDir(projectDir);
        BuildResult result = runner.build();

        // Verify the result
        assertNotEquals(
            result.task(":downloadVanillaJars")
                .getOutcome(),
            TaskOutcome.FAILED);
    }

    private void writeString(File file, String string) throws IOException {
        try (Writer writer = new FileWriter(file)) {
            writer.write(string);
        }
    }
}
